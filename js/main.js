// main.js - X·ª≠ l√Ω ch√≠nh game flow, g·ª£i √Ω, kh·ªüi ƒë·ªông level

import { createGrid } from './grid.js';
import {
  updateLevelDisplay,
  updateScoreDisplay,
  updateHintDisplay,
  showBonusOverlay,
} from './ui.js';
import { gameState, resetGame } from './gameState.js';
import { applySettingsAndStartGame } from './settings.js';
import { checkLevelComplete, initLogic } from './logic.js';

// Giao di·ªán khi load
import { createMainMenu } from './mainmenu.js';
window.onload = () => createMainMenu();

/**
 * Kh·ªüi t·∫°o m√†n ch∆°i t∆∞∆°ng ·ª©ng v·ªõi level
 */
export function initializeLevel(level) {
  console.log(`[üß© INIT] T·∫°o l∆∞·ªõi cho level ${level}`);

  gameState.currentLevel = level;

  // Hi·ªÉn th·ªã container ch∆°i game
  const gameContainer = document.getElementById('game-container');
  if (gameContainer) gameContainer.style.display = 'flex';

  updateLevelDisplay(level);
  updateScoreDisplay(gameState.score);
  updateHintDisplay(gameState.hints || 0);

  const gridSize = Math.min(level, 12);
  createGrid(gridSize);
  initLogic(); // ‚úÖ G·∫Øn s·ª± ki·ªán click v√†o √¥
}

/**
 * Chuy·ªÉn sang m√†n ti·∫øp theo
 */
export function nextLevel() {
  gameState.currentLevel++;
  console.log(`[üì§ nextLevel()] Chuy·ªÉn sang level ${gameState.currentLevel}`);
  initializeLevel(gameState.currentLevel);
}

/**
 * T√¨m c·∫∑p ƒë·ªÉ g·ª£i √Ω khi ng∆∞·ªùi ch∆°i b·∫•m n√∫t "G·ª£i √Ω"
 */
function handleHintClick() {
  if (!gameState.hints || gameState.hints <= 0) {
    showBonusOverlay('üö´ H·∫øt l∆∞·ª£t g·ª£i √Ω!');
    return;
  }

  const tiles = document.querySelectorAll('.tile:not(.matched)');
  const tilePairs = {};

  tiles.forEach((tile) => {
    const imageId = tile.dataset.imageId;
    if (!tilePairs[imageId]) {
      tilePairs[imageId] = [tile];
    } else {
      tilePairs[imageId].push(tile);
    }
  });

  for (let imageId in tilePairs) {
    if (tilePairs[imageId].length >= 2) {
      const [t1, t2] = tilePairs[imageId];

      simulateTileMatch(t1, t2);

      gameState.hints--;
      updateHintDisplay(gameState.hints);
      return;
    }
  }

  showBonusOverlay('üòï Kh√¥ng t√¨m th·∫•y c·∫∑p n√†o ƒë·ªÉ g·ª£i √Ω!');
}

/**
 * G·ª£i √Ω: T·ª± ƒë·ªông gh√©p c·∫∑p 2 √¥
 */
function simulateTileMatch(tile1, tile2) {
  const img1 = tile1.querySelector('img');
  const img2 = tile2.querySelector('img');

  if (img1) img1.classList.remove('hidden');
  if (img2) img2.classList.remove('hidden');

  tile1.classList.add('matched');
  tile2.classList.add('matched');

  gameState.score += 20;
  updateScoreDisplay(gameState.score);

  checkLevelComplete(); // ‚úÖ ki·ªÉm tra xem ƒë√£ ho√†n th√†nh m√†n ch∆∞a
}

/**
 * G√°n s·ª± ki·ªán x√°c nh·∫≠n c√†i ƒë·∫∑t n·∫øu t·ªìn t·∫°i n√∫t
 */
const confirmBtn = document.getElementById('confirm-settings-btn');
if (confirmBtn) {
  confirmBtn.onclick = () => {
    gameState.hints = 30;
    applySettingsAndStartGame();
  };
}

/**
 * G√°n s·ª± ki·ªán n√∫t b·∫Øt ƒë·∫ßu l·∫°i
 */
const restartBtn = document.getElementById('btn-restart');
if (restartBtn) {
  restartBtn.onclick = () => {
    resetGame();
    initializeLevel(1);
  };
}

/**
 * G√°n s·ª± ki·ªán n√∫t g·ª£i √Ω
 */
const hintBtn = document.getElementById('btn-hint');
if (hintBtn) {
  hintBtn.onclick = handleHintClick;
}
